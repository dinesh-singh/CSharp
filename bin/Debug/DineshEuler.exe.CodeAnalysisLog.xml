<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="DineshEuler">
   <Messages>
    <Message Id="Dinesh" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dinesh' in namespace name 'DineshEuler'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler\bin\Debug\DineshEuler.exe">
   <Modules>
    <Module Name="dinesheuler.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'DineshEuler.exe' with a strong name key.</Issue>
      </Message>
      <Message Id="Dinesh" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dinesh' in assembly name 'DineshEuler.exe'.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="DineshEuler">
       <Types>
        <Type Name="BigInteger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="348">In externally visible method 'BigInteger.BigInteger(byte[])', validate parameter 'array' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Addition(DineshEuler.BigInteger,DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="566">In externally visible method 'BigInteger.operator +(BigInteger, BigInteger)', validate parameter 'leftSide' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="566">In externally visible method 'BigInteger.operator +(BigInteger, BigInteger)', validate parameter 'rightSide' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_BitwiseAnd(DineshEuler.BigInteger,DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1047">In externally visible method 'BigInteger.operator &amp;(BigInteger, BigInteger)', validate parameter 'leftSide' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1047">In externally visible method 'BigInteger.operator &amp;(BigInteger, BigInteger)', validate parameter 'rightSide' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_BitwiseOr(DineshEuler.BigInteger,DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1063">In externally visible method 'BigInteger.operator |(BigInteger, BigInteger)', validate parameter 'leftSide' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1063">In externally visible method 'BigInteger.operator |(BigInteger, BigInteger)', validate parameter 'rightSide' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_ExclusiveOr(DineshEuler.BigInteger,DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1079">In externally visible method 'BigInteger.operator ^(BigInteger, BigInteger)', validate parameter 'leftSide' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1079">In externally visible method 'BigInteger.operator ^(BigInteger, BigInteger)', validate parameter 'rightSide' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Modulus(DineshEuler.BigInteger,DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Error" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="998">Provide a method named 'Mod' as a friendly alternate for operator 'BigInteger.operator %(BigInteger, BigInteger)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_OnesComplement(DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="1095">In externally visible method 'BigInteger.operator ~(BigInteger)', validate parameter 'leftSide' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Subtraction(DineshEuler.BigInteger,DineshEuler.BigInteger)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="619">In externally visible method 'BigInteger.operator -(BigInteger, BigInteger)', validate parameter 'leftSide' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="619">In externally visible method 'BigInteger.operator -(BigInteger, BigInteger)', validate parameter 'rightSide' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DigitsArray" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="49">Initialize all static fields in 'DigitsArray' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AllBits" Kind="Field" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DigitsArray.AllBits' is declared as 'static readonly' but is initialized with a constant value '-1'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyFrom(System.UInt32[],System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="offset" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="69">Parameter 'offset' of 'DigitsArray.CopyFrom(uint[], int, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShiftLeft(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="BigInteger.cs" Line="178">'DigitsArray.ShiftLeft(int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Problem2" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'Problem2' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Fibonacci(DineshEuler.Problem2+SumType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="Problem2.cs" Line="21">'Problem2.Fibonacci(Problem2.SumType)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt64(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="Problem2.cs" Line="29">Because the behavior of 'Convert.ToUInt64(object)' could vary based on the current user's locale settings, replace this call in 'Problem2.Fibonacci(Problem2.SumType)' with a call to 'Convert.ToUInt64(object, IFormatProvider)'. If the result of 'Convert.ToUInt64(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowFibonnaci(DineshEuler.Problem2+SumType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="Problem2.cs" Line="58">'Problem2.ShowFibonnaci(Problem2.SumType)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt64(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="Problem2.cs" Line="63">Because the behavior of 'Convert.ToUInt64(object)' could vary based on the current user's locale settings, replace this call in 'Problem2.ShowFibonnaci(Problem2.SumType)' with a call to 'Convert.ToUInt64(object, IFormatProvider)'. If the result of 'Convert.ToUInt64(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Problem4" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#IsPalindrome(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="Problem4.cs" Line="37">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Problem4.IsPalindrome(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LargestSixDigitPalindrome()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2013-03-07 18:33:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\dineshs2\Documents\Visual Studio 2010\Projects\DineshEuler\DineshEuler" File="Problem4.cs" Line="11">'Problem4.LargestSixDigitPalindrome()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
   <Name>Operator overloads have named alternates</Name>
   <Description>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</Description>
   <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182355(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
   <Name>Use literals where appropriate</Name>
   <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
   <Resolution Name="Default">Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182280(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
